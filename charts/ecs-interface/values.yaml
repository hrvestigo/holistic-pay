nameOverride: ''
image:
  registry: docker.io
  pullPolicy: IfNotPresent
  app:
    registry: null
    imageLocation: null
    tag: ''
    pullPolicy: null
  liquibase:
    registry: null
    imageLocation: null
    tag: 1.27.0
    pullPolicy: null
imagePullSecrets: []
env:
  type: ''
  label: ''
datasource:
  host: ''
  port: ''
  dbName: ''
  user: ''
  globalSchemaPrefix: wo
  connTimeout: 60000
  maxPoolSize: 2
  minIdle: 0
  idleTimeout: 120000
  connectionParams: {}
liquibase:
  enabled: true
  syncOnly: false
  user: ''
  role: ''
  replicationRole: ''
  resources: {}
members:
- businessUnit: JT
  applicationMember: JT
  memberSign: JT
  deliveryChannel: HP
  branchCode: '001'
  moduleName: PAY
  userId: HP0001
  liquibase:
    role: ''
    replicationRole: ''
  datasource:
    globalSchema: false
    host: ''
    port: ''
    dbName: ''
    user: ''
    password: ''
kafka:
  user: ''
  servers: ''
  saslMechanism: PLAIN
  securityProtocol: SASL_SSL
  sslEndpointIdentAlg: HTTPS
  schemaRegistry:
    credSource: USER_INFO
    user: ''
    url: ''
  topics:
    paymentOriginalMessage:
      name: gcp.ipt1.hp.evt.paymentoriginalmessage
      consumerGroup: gcp.ipt1.hp.evt.sirspec1.paymentoriginalmessage
    paymentOriginalMessageInbox:
      name: gcp.ipt1.hp.evt.paymentoriginalmessageinbox
      consumerGroup: gcp.ipt1.hp.evt.sirspec1.paymentoriginalmessageinbox
    paymentOrderFlow:
      name: gcp.ipt1.hp.evt.paymentorderflow
      consumerGroup: gcp.ipt1.hp.evt.sirspec1.paymentorderflow
    paymentOrderFlowInbox:
      name: gcp.ipt1.hp.evt.paymentoriginalmessageinbox.01
      consumerGroup: gcp.ipt1.sirspec.paymentoriginalmessageinbox
    paymentOrderUpdate:
      name: gcp.ipt1.hp.evt.paymentorderupdate
    paymentOrderEventFlow:
      name: gcp.ipt1.hp.evt.paymentordereventflow
      consumerGroup: gcp.ipt1.hp.evt.sirspec.paymentordereventflow
    paymentOrderEventFlowInbox:
      name: gw.ipt1.hp.evt.paymentordereventflowinbox.01
      consumerGroup: gw.ipt1.sirspec.paymentordereventflowinbox
ecs:
  service:
    url: ''
  rest:
    response:
      logging:
        all: false
    uri:
      payOrderForward: WS9030
      payOrderNotification: notUsed
      payOrderPosting: WS9018
      payOrderCancellation: WS9019
      payOrderCrePosCanc: WS9013
      payOrderCancellationRequest: WS9024
      payOrderRjctCancellationRequest: WS9025
      payOrderReturn: WS9016
      payOrderCancellationRequestStatu: WS9017
      payOrderReceivingOutboundTransfer: WS9004
  nonretry:
    codes: wrnA205,wrnA50,wrnB20,wrnA243,DU05,inf995
  interface:
    ws9013:
      requestedExecutionDateMode: IntrBkSttlmDt
    ws9016:
      settlementDateMode: IntrBkSttlmDt
keycloak:
  enabled: false
  realm: Holistic-Pay
  serverUrl: ''
  resource: aux
request:
  sanitization:
    enabled: true
response:
  encoding:
    enabled: false
timezone: ''
secret:
  decryptionKey: ''
  datasourcePassword: ''
  kafkaPassword: ''
  kafkaSchemaRegistryPassword: ''
  liquibasePassword: ''
  trustStorePassword: ''
  keyStorePassword: ''
  oauth2ClientToken: ''
logger:
  format: STRING
  level:
    health: DEBUG
    kafka: DEBUG
    kafkaCore: INFO
    rest: DEBUG
    database: ERROR
    databaseSql: DEBUG
    databaseBind: TRACE
    databaseExtract: TRACE
    databaseSlowQuery: INFO
    businessLogic: DEBUG
    general: DEBUG
  logToFile: false
  rollingFileAppender: false
  logDir: /var/log/app
  logDirMount:
    enabled: false
  microserviceTag: ECSINT
  maskSensitive: false
healthStatusDownReturnCode: '418'
javaOpts: -Xms256M -Xmx256M
springActiveProfile: prod
podAnnotations: {}
deploymentAnnotations: {}
serviceAnnotations: {}
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
securityContext: {}
service:
  enabled: true
  type: ClusterIP
  port: 8443
  nodePort: ''
  clusterIP: ''
  loadBalancerIP: ''
  loadBalancerSourceRanges: []
  annotations: {}
  labels: {}
ingress:
  enabled: false
  className: ''
  annotations: {}
  hosts: []
  tls: []
resources:
  limits:
    cpu: 1
    memory: 1Gi
  requests:
    cpu: 50m
    memory: 256Mi
initContainers: []
nodeSelector: {}
tolerations: []
affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/arch
          operator: In
          values:
          - amd64
        - key: kubernetes.io/os
          operator: In
          values:
          - linux
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - ecs-interface
        topologyKey: kubernetes.io/hostname
deployment:
  replicaCount: 1
  annotations: {}
  labels: {}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  minReadySeconds: 60
  terminationGracePeriodSeconds: 60
  restartPolicy: Always
  readinessProbe:
    initialDelaySeconds: 90
    periodSeconds: 60
    timeoutSeconds: 180
    successThreshold: 1
    failureThreshold: 2
    httpGet:
      path: /health/readiness
      port: http
      scheme: HTTPS
  livenessProbe:
    initialDelaySeconds: 90
    periodSeconds: 60
    timeoutSeconds: 10
    failureThreshold: 3
    httpGet:
      path: /health/liveness
      port: http
      scheme: HTTPS
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
vpa:
  enabled: false
  updateMode: 'Off'
mountServerCertFromSecret:
  enabled: false
  secretName: ''
  certPath: ''
  keyPath: ''
mountKeyStoreFromSecret:
  enabled: false
  secretName: ''
  keyStoreName: ''
  keyStoreType: JKS
mountTrustStoreFromSecret:
  enabled: false
  secretName: ''
  trustStoreName: ''
  trustStoreType: JKS
mountCaFromSecret:
  enabled: false
  secretName: ''
customVolumes: []
customMounts: []
customEnv: []
prometheus:
  exposed: true
tracing:
  enabled: false
  samplingProbability: 0.0
  otlpEndpoint: ''
inbox:
  scheduler:
    start: true
    level1:
      fixedRate: '60000'
      retryCounter: '10'
      retryDelay: '60'
    level2:
      fixedRate: '600000'
      retryCounter: '20'
      retryDelay: '600'
