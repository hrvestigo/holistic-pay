nameOverride: ''
image:
  registry: docker.io
  pullPolicy: IfNotPresent
  app:
    registry: null
    imageLocation: null
    tag: ''
    pullPolicy: null
  liquibase:
    registry: null
    imageLocation: null
    tag: 1.303.2
    pullPolicy: null
imagePullSecrets: []
env:
  type: ''
  label: ''
datasource:
  user: ''
  serverName: ''
  databaseName: ''
  portNumber: ''
  currentSchema: CONNECT
  globalSchemaPrefix: wo
  connTimeout: 60000
  maxPoolSize: 2
  minIdle: 0
  idleTimeout: 120000
  connectionParams: {}
liquibase:
  enabled: true
  syncOnly: false
  user: ''
  role: ''
  replicationRole: ''
  resources: {}
members:
- businessUnit: RB
  applicationMember: RB
  memberSign: RB
  deliveryChannel: IB
  branchCode: '012'
  moduleName: PAY
  userId: HP0001
  liquibase:
    role: ''
    replicationRole: ''
  datasource:
    globalSchema: false
ibmMq:
  autoConfigure: true
  queueManager: ''
  channel: ''
  connName: ''
  user: ''
  norkomcall:
    queueName: ''
  norkomresponse:
    queueName: ''
atomikos:
  borrowConnectionTimeout: 30000
  maxIdleTime: 1800000
  maxLifetime: 3600000
  maxPoolSize: 30
  minPoolSize: 5
  jtaTimeout: 60000
  connectionFactory:
    maxIdleTime: 1800000
    maxLifeTime: 3600000
    maxPoolSize: 30
    minPoolSize: 5
kafka:
  user: ''
  servers: ''
  saslMechanism: PLAIN
  securityProtocol: SASL_SSL
  sslEndpointIdentAlg: HTTPS
  schemaRegistry:
    credSource: USER_INFO
    user: ''
    url: ''
  streams:
    replication:
      factor: '3'
    application:
      id: sirius-specific
    auto:
      startup: true
  topics:
    paymentOriginalMessage:
      name: gcp.ipt1.hp.evt.paymentoriginalmessage
      consumerGroup: gcp.ipt1.hp.evt.sirspec1.paymentoriginalmessage
    paymentOriginalMessageInbox:
      name: gcp.ipt1.hp.evt.paymentoriginalmessageinbox
      consumerGroup: gcp.ipt1.hp.evt.sirspec1.paymentoriginalmessageinbox
    paymentOrderFlow:
      name: gcp.ipt1.hp.evt.paymentorderflow
      consumerGroup: gcp.ipt1.hp.evt.sirspec1.paymentorderflow
    paymentOrderUpdate:
      name: gcp.ipt1.hp.evt.paymentorderupdate
    paymentOrderChecksResult:
      name: gcp.ipt1.hp.evt.paymentorderchecksresult
    ecsSpecificChecks:
      name: gcp.ipt1.hp.evt.ecsspecificchecks
      consumerGroup: gcp.ipt1.hp.evt.sirspec.ecsspecificchecks
    paymentOrderEventFlow:
      name: gcp.ipt1.hp.evt.paymentordereventflow
      consumerGroup: gcp.ipt1.hp.evt.sirspec.paymentordereventflow
    personStructureInitial:
      name: hr.vestigo.hp.perstrucinitial
    parameterization:
      name: gcp.ipt1.hp.evt.param
      consumerGroup: gcp.ipt1.hp.evt.sirspec.ecsspecificparam
    customerAccount:
      name: gcp.ipt1.hp.evt.sirspec.customer.account
      consumerGroup: gcp.ipt1.hp.evt.sirspec.customer.account
      env: sit
    cusaccJrr:
      name: gcp.ipt1.hp.evt.cusacc.jrr
      consumerGroup: gcp.ipt1.hp.evt.sirspec.cusacc.jrr
      env: sit
    cusaccPayor:
      name: gcp.ipt1.hp.evt.cusacc.payor
      consumerGroup: gcp.ipt1.hp.evt.sirspec.cusacc.payor
      env: sit
    userCodeValue:
      name: gcp.ipt1.hp.evt.sirspec.user.code.value
      consumerGroup: gcp.ipt1.hp.evt.sirspec.user.code.value
      env: sit
    cusaccCurrency:
      name: gcp.ipt1.hp.evt.cusacc.currency
      consumerGroup: gcp.ipt1.hp.evt.sirspec.cusacc.currency
      env: sit
    customer:
      name: gcp.ipt1.hp.evt.sirspec.customer
      consumerGroup: gcp.ipt1.hp.evt.sirspec.customer
      env: sit
    bicexclusion:
      name: gcp.ipt1.hp.evt.sirspec.bicexclusion
    customerAccountStatement:
      name: hr.vestigo.hp.customeraccountstatement
    balanceChangeRequest:
      name: hr.vestigo.hp.balancechangerequest
    ecsPaymentCompensation:
      name: hr.vestigo.hp.ecspaymentcompensation
      consumerGroup: gcp.ipt1.hp.evt.sirspec.ecs.payment.compensation
    limithistorycdc:
      name: hr.vestigo.hp.limithistorycdc.01
      consumerGroup: hr.vestigo.hp.limithistorycdc
    balannouncecdc:
      name: hr.vestigo.hp.balannouncecdc.01
      consumerGroup: hr.vestigo.hp.balannouncecdc
    limithistory:
      name: hr.vestigo.hp.limithistory.01
    accountlimitinitial:
      name: hr.vestigo.hp.accountlimitinitial.01
    transactionScreeningamlcft:
      name: hr.vestigo.hp.transactionscreeningamlcft.01
      consumerGroup: hr.vestigo.hp.transactionscreeningamlcft
external:
  core:
    system:
      member:
        sign:
          default: RB
sirius:
  service:
    url: ''
  rest:
    response:
      logging:
        all: false
    uri:
      payOrderForward: WS9030
      payOrderNotification: notUsed
      payOrderPosting: WS9018
      payOrderCancellation: WS9019
      payOrderCrePosCanc: WS9013
      payOrderCancellationRequest: WS9024
      payOrderRjctCancellationRequest: WS9025
      payOrderReturn: WS9016
      payOrderCancellationRequestStatu: WS9017
      payOrderReceivingOutboundTransfer: WS9004
  specific:
    cache:
      refresh:
        rate: 86400
grpc:
  server:
    enabled: false
    port: 9090
    security:
      enabled: false
      certificate: null
      key: null
keycloak:
  enabled: false
  realm: Holistic-Pay
  serverUrl: ''
  resource: aux
request:
  sanitization:
    enabled: true
response:
  encoding:
    enabled: false
timezone: ''
secret:
  decryptionKey: ''
  kafkaPassword: ''
  kafkaSchemaRegistryPassword: ''
  liquibasePassword: ''
  trustStorePassword: ''
  keyStorePassword: ''
  datasourcePassword: ''
  mqPassword: ''
logger:
  format: STRING
  level:
    kafka: DEBUG
    kafkaCore: INFO
    rest: INFO
    database: DEBUG
    databaseParam: TRACE
    businessLogic: DEBUG
    health: DEBUG
    general: DEBUG
  logToFile: false
  rollingFileAppender: false
  logDir: /var/log/app
  logDirMount:
    enabled: false
  microserviceTag: SIRSPE
  maskSensitive: false
healthStatusDownReturnCode: '418'
javaOpts: -Xms256M -Xmx512M
springActiveProfile: prod
podAnnotations: {}
deploymentAnnotations: {}
serviceAnnotations: {}
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
securityContext: {}
service:
  enabled: true
  type: ClusterIP
  port: 8443
  nodePort: ''
  clusterIP: ''
  loadBalancerIP: ''
  loadBalancerSourceRanges: []
  annotations: {}
  labels: {}
ingress:
  enabled: false
  className: ''
  annotations: {}
  hosts: []
  tls: []
resources:
  limits:
    cpu: 1
    memory: 1Gi
  requests:
    cpu: 50m
    memory: 256Mi
initContainers: []
nodeSelector: {}
tolerations: []
affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/arch
          operator: In
          values:
          - amd64
        - key: kubernetes.io/os
          operator: In
          values:
          - linux
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - payment-order
        topologyKey: kubernetes.io/hostname
riskLimits:
  enabled: true
deployment:
  replicaCount: 1
  annotations: {}
  labels: {}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  minReadySeconds: 60
  terminationGracePeriodSeconds: 60
  restartPolicy: Always
  readinessProbe:
    initialDelaySeconds: 90
    periodSeconds: 60
    timeoutSeconds: 181
    successThreshold: 1
    failureThreshold: 2
    httpGet:
      path: /health/readiness
      port: http
      scheme: HTTPS
  livenessProbe:
    initialDelaySeconds: 90
    periodSeconds: 60
    timeoutSeconds: 10
    failureThreshold: 3
    httpGet:
      path: /health/liveness
      port: http
      scheme: HTTPS
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
mountServerCertFromSecret:
  enabled: false
  secretName: ''
  certPath: ''
  keyPath: ''
mountKeyStoreFromSecret:
  enabled: false
  secretName: ''
  keyStoreName: ''
  keyStoreType: JKS
mountTrustStoreFromSecret:
  enabled: false
  secretName: ''
  trustStoreName: ''
  trustStoreType: JKS
mountCaFromSecret:
  enabled: false
  secretName: ''
customVolumes: []
customMounts: []
customEnv: []
tracing:
  samplingProbability: 0.0
  otlpEndpoint: http://tempo.monitor:4318/v1/traces
kafkaConsumer:
  ecsPaymentCompensation:
    enabled: false
  limithistory:
    enabled: false
  balannounce:
    enabled: false
  transactionscreening:
    enabled: false
